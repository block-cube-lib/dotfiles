[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'nvim-lua/completion-nvim'

###
# ddu
###
repo = 'Shougo/ddu.vim'
depends = [
  'denops.vim',
  'ddu-column-filename',
  'ddu-commands.vim',
  'ddu-filter-matcher_substring',
  'ddu-filter-sorter_alpha',
  'ddu-kind-file',
  'ddu-kind-word',
  'ddu-source-buffer',
  'ddu-source-file',
  'ddu-source-file_rec',
  'ddu-source-line'
  'ddu-source-mr',
  'ddu-source-register',
  'ddu-ui-ff'
  'ddu-ui-filer',
  'mr.vim',
]
hook_add='''
  nnoremap <SID>[Ddu] <Nop>
  nmap <Space>d <SID>[Ddu]
  nnoremap <silent> <SID>[Ddu]F :<C-u>Ddu filer<CR>
  nnoremap <silent> <SID>[Ddu]b :<C-u>Ddu buffer<CR>
  nnoremap <silent> <SID>[Ddu]f :<C-u>Ddu file<CR>
  nnoremap <silent> <SID>[Ddu]l :<C-u>Ddu line<CR>
  nnoremap <silent> <SID>[Ddu]m :<C-u>Ddu mr<CR>
  nnoremap <silent> <SID>[Ddu]r :<C-u>Ddu register<CR>
'''
hook_source='''
  let float_width = 0.85
  let float_height = 0.7
  call ddu#custom#patch_global({
      \   'ui': 'ff',
      \   'uiParams': {
      \       'ff': {
      \           'split': 'floating',
      \           'startFilter': v:true,
      \           'prompt': '> ',
      \           'winWidth': float2nr(&columns * float_width),
      \           'winCol': float2nr((&columns - (&columns * float_width)) / 2),
      \           'winHeight': float2nr(&lines * float_height),
      \           'winRow': float2nr((&lines - (&lines * float_height)) / 2),
      \       },
      \       'filer': {
      \           'split':'floating',
      \           'winWidth': float2nr(&columns * float_width),
      \           'winCol': float2nr((&columns - (&columns * float_width)) / 2),
      \           'winHeight': float2nr(&lines * float_height),
      \           'winRow': float2nr((&lines - (&lines * float_height)) / 2),
      \       },
      \   },
      \   'sources': [
      \       {'name':'buffer'},
      \       {'name':'file'},
      \       {'name':'line'},
      \       {'name':'mr'},
      \       {'name':'register'},
      \   ],
      \   'sourceOptions': {
      \     '_': {
      \       'matchers': ['matcher_substring'],
      \       'ignoreCase': v:true,
      \       'sorters': ['sorter_alpha'],
      \     },
      \   },
      \   'filterParams': {
      \     'matcher_substring': {
      \       'highlightMatched': 'Search',
      \     },
      \   },
      \   'kindOptions': {
      \     'file': {
      \       'defaultAction': 'open',
      \     },
      \     'word': {
      \       'defaultAction': 'append',
      \     },
      \   },
      \ })

  call ddu#custom#patch_local('file_rec', {
      \   'sources': [{
      \     'name':'file_rec',
      \     'param': {
      \       'ignoredDirectories': ['.git', 'var', 'node_modules', ]
      \     },
      \   }],
      \})

  call ddu#custom#patch_local('filer', {
      \   'ui': 'filer',
      \   'sources': [
      \       {'name':'file', 'params': {}}
      \   ],
      \   'sourceOptions': {
      \     '_': {
      \       'columns': ['filename'],
      \     },
      \   },
      \   'columns': ['filename'],
      \   'kindOptions': {
      \     'file': {
      \       'defaultAction': 'open',
      \     },
      \   },
      \   'actionOptions': {
      \     'narrow': {
      \       'quit': v:true,
      \     },
      \   },
      \ })


  "ddu-key-setting
  autocmd FileType ddu-ff call s:ddu_my_settings()
  function! s:ddu_my_settings() abort
    nnoremap <buffer><silent> <CR> <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
    nnoremap <buffer><silent> i <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
    nnoremap <buffer><silent> q <Cmd>call ddu#ui#ff#do_action('quit')<CR>
  endfunction

  autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
  function! s:ddu_filter_my_settings() abort
    nnoremap <buffer><silent> <CR> :q<CR>
    nnoremap <buffer><silent> <ESC> :q<CR>
    nnoremap <buffer><silent> q :q<CR>
  endfunction
'''

[[plugins]]
repo = 'Shougo/ddu-ui-ff'

[[plugins]]
repo = 'Shougo/ddu-ui-filer'

[[plugins]]
repo = 'Shougo/ddu-source-file'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'

[[plugins]]
repo = 'shun/ddu-source-buffer'

[[plugins]]
repo = 'Shougo/ddu-source-line'

[[plugins]]
repo = 'Shougo/ddu-source-register'

[[plugins]]
repo = 'Shougo/ddu-filter-sorter_alpha'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'

[[plugins]]
repo = 'kuuote/ddu-source-mr'

[[plugins]]
repo = 'lambdalisue/mr.vim'

[[plugins]]
repo = 'Shougo/ddu-kind-file'

[[plugins]]
repo = 'Shougo/ddu-kind-word'

[[plugins]]
repo = 'Shougo/ddu-column-filename'

[[plugins]]
repo = 'Shougo/ddu-commands.vim'


###
# utility
###
[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap [NERDTree] <Nop>
  nmap <Space>n [NERDTree]
  nnoremap <silent> [NERDTree] :<C-u>NERDTreeToggle<CR>
'''

###
# display
###
[[plugins]]
repo = 'KeitaNakamura/highlighter.nvim'
hook_add = '''
  let g:highlighter#auto_update = 1
  let g:heghlighter#project_root_signs = ['.git', '.clang-format']
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_exclude_filetypes = ['markdown']

  let g:indent_guides_auto_colors = 1
  "augroup set_indent_guides
  "  autocmd!
  "  autocmd VimEnter,colorscheme * :hi IndentGuidesOdd  guifg=gray guibg=#393939 ctermfg=8 ctermbg=7
  "  autocmd VimEnter,colorscheme * :hi IndentGuidesEven guifg=gray guibg=#303030 ctermfg=7 ctermbg=8
  "augroup END
'''

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

###
# browser
###
repo = 'tyru/open-browser.vim'
hook_add = '''
  let g:netrw_nogx = 1 " disable netrw's gx mapping.
  nmap gx <Plug>(openbrowser-smart_search)
  vmap gx <Plug>(openbrowser-smart_search)
'''

[[plugins]]
repo = 'kannokanno/previm'

# text browser
[[plugins]]
repo = 'yuratomo/w3m.vim'
if = '''executable("w3m")'''

###
# syntax check
###
[[plugins]]
repo = 'scrooloose/syntastic'
hook_add = '''
  let g:syntastic_mode_map = {
        \ 'mode': 'passive',
        \ 'active_filetypes': ['swift']
        \}
'''

###
# editor
###
[[plugins]]
repo = 'editorconfig/editorconfig-vim'

###
# status line
###
[[plugins]] # status line
repo = 'itchyny/lightline.vim'
depends = ['itchyny/vim-gitbranch']
hook_add = '''
  function! LightLineFileName()
    return expand('%') !=# '' ? expand('%') : '[No Name]'
  endfunction

  let g:lightline = {
        \ 'colorscheme': 'powerline',
        \ 'active': {
        \   'left': [ ['mode', 'paste'],
        \             ['gitbranch', 'readonly', 'filename', 'modified'] ]
        \ },
        \ 'component_function': {
        \   'gitbranch': 'gitbranch#name',
        \   'filename': 'LightLineFileName'
        \ },
        \}
'''

[[plugins]]
repo = 'itchyny/vim-gitbranch'

###
# colorscheme
###
[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'folke/tokyonight.nvim'
hook_add = '''
  augroup set_colorscheme
    autocmd!
    let g:tokyonight_style="night"
    autocmd VimEnter * nested syntax on
    autocmd VimEnter * nested colorscheme tokyonight
  augroup END
'''
