###
# Denite
###

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  nnoremap [Denite] <Nop>
  nmap <Space>d [Denite]
  nnoremap <silent> [Denite]b :<C-u>Denite buffer<CR>
  nnoremap <silent> [Denite]d :<C-u>Denite directory_rec<CR>
  nnoremap <silent> [Denite]f :<C-u>Denite file/rec<CR>
  nnoremap <silent> [Denite]h :<C-u>Denite help<CR>
  nnoremap <silent> [Denite]l :<C-u>Denite line<CR>
  nnoremap <silent> [Denite]c :<C-u>Denite colorscheme<CR>

  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
          \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d
          \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
          \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
          \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
          \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
          \ denite#do_map('toggle_select').'j'
  endfunction<Paste>
'''
hook_source = '''
  call denite#custom#map('_', "\<C-n>", 'move_to_next_line')
  call denite#custom#map('_', "\<C-p>", 'move_to_prev_line')

'''

[[plugins]]
repo = 'Shougo/neomru.vim'
hook_add = '''
  nnoremap <silent> [Denite]m :<C-u>Denite file_mru<CR>
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'
hook_add = '''
  nnoremap <silent> [Denite]y :<C-u>Denite neoyank<CR>
'''

###
# filer
###
[[plugins]]
repo = "Shougo/defx.nvim"
hook_add = '''
  nnoremap [defx] <Nop>
  nmap <Space>F [defx]
  nnoremap <silent> [defx] :<C-u>Defx<CR>
  autocmd FileType defx call s:defx_my_settings()
  function! s:defx_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
          \ defx#do_action('open')
    nnoremap <silent><buffer><expr> K
          \ defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> N
          \ defx#do_action('new_file')
    nnoremap <silent><buffer><expr> d
          \ defx#do_action('remove')
    nnoremap <silent><buffer><expr> r
          \ defx#do_action('rename')
    nnoremap <silent><buffer><expr> h
          \ defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> ~
          \ defx#do_action('cd')
    nnoremap <silent><buffer><expr> <Space>
          \ defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> j
          \ line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k
          \ line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><expr> <C-l>
          \ defx#do_action('redraw')
  endfunction
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_source = '''
let g:context_filetype#ignore_patterns = {
    \ 'toml': ['^\s*#\s*'],
    \ }
'''

[[plugins]]
repo = 'Shougo/deoppet.nvim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertEnter'
on_source = 'ddc.vim'
if = 'has("nvim")'
hook_source = '''
  call deoppet#initialize()
  call deoppet#custom#option('snippets',
  \ map(globpath(&runtimepath, 'neosnippets', 1, 1),
  \     { _, val -> { 'path': val } }))

  imap <C-k>  <Plug>(deoppet_expand)
  imap <C-f>  <Plug>(deoppet_jump_forward)
  imap <C-b>  <Plug>(deoppet_jump_backward)
  smap <C-f>  <Plug>(deoppet_jump_forward)
  smap <C-b>  <Plug>(deoppet_jump_backward)

  " Use deoppet source.
  call ddc#custom#patch_global('sources', ['deoppet'])

  " Change source options
  call ddc#custom#patch_global('sourceOptions', {
        \ 'deoppet': {'dup': v:true, 'mark': 'dp'},
        \ })
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

# markdown
[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown']
hook_add = '''
  let g:vim_markdown_conceal = 0
  let g:vim_markdown_conceal_code_blocks = 0
  let g:vim_markdown_folding_disabled = 1
'''

# toml
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

# plantuml
[[plugins]]
repo = 'aklt/plantuml-syntax'
on_ft = ['plantuml']

# fish
[[plugins]]
repo = 'dag/vim-fish'
on_ft = ['fish']

# swift
[[plugins]]
repo = 'keith/swift.vim'
on_ft = ['swift']

# rust
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']
hook_source = '''
let g:rustfmt_autosave = 0

if executable("rustfmt")
  nnoremap [RustFmt] <Nop>
  nmap <Space>f [RustFmt]
  nnoremap <silent> [RustFmt] :<C-u>RustFmt<CR>
'''
