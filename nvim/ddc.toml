[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['context_filetype.vim', 'denops.vim', 'pum.vim']
on_event = 'InsertEnter'
hook_source = '''
  inoremap <silent><expr> <C-l> ddc#complete_common_string()

  call ddc#custom#patch_global(
      \ 'sources', has('nvim') ?
      \ ['around', 'deoppet', 'file'] :
      \ ['around', 'file'],
      \ )
  call ddc#custom#patch_global('sourceOptions', {
    \ '_': {
    \   'ignoreCase': v:true,
    \   'matchers': ['matcher_head'],
    \   'sorters': ['sorter_rank'],
    \   'converters': ['converter_remove_overlap'],
    \ },
    \ 'around': {
    \   'mark': 'A',
    \   'matchers': ['matcher_head', 'matcher_length'],
    \ },
    \ 'eskk': {'mark': 'eskk', 'matchers': [], 'sorters': []},
    \ 'necovim': {'mark': 'vim'},
    \ 'cmdline': {'mark': 'cmdline'},
    \ 'deoppet': {'mark': 'dp', 'dup': v:true},
    \ 'nvim-lsp': {
    \   'mark': 'lsp',
    \   'forceCompletionPattern': '\.\w*|:\w*|->\w*'
    \ },
    \ 'file': {
    \   'mark': 'F',
    \   'isVolatile': v:true,
    \   'minAutoCompleteLength': 1000,
    \   'forceCompletionPattern': '\S/\S*'
    \ },
    \ 'cmdline-history': {'mark': 'history'},
    \ })

    if has('nvim')
      call ddc#custom#patch_filetype(
              \ ['rust', 'go'], 'sources',
              \ ['nvim-lsp', 'deoppet', 'around']
              \ )
    endif

  call ddc#custom#patch_filetype(
    \ ['help', 'markdown', 'gitcommit'], 'sources', has('nvim') ?
    \ ['deoppet', 'around'] :
    \ ['around']
    \ )

  " pum.vim
  call ddc#custom#patch_global('autoCompleteEvents', [
      \ 'InsertEnter', 'TextChangedI', 'TextChangedP',
      \ 'CmdlineEnter', 'CmdlineChanged',
      \ ])
  call ddc#custom#patch_global('completionMenu', 'pum.vim')
  inoremap <silent><expr> <TAB>
        \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
        \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
        \ '<TAB>' : ddc#manual_complete()
  inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
  inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
  inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
  inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
  inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
  inoremap <silent><expr> <C-l>   ddc#map#extend()
  call ddc#enable()
'''
hook_add = '''
  nnoremap :       <Cmd>call CommandlinePre(':')<CR>:
  nnoremap ?       <Cmd>call CommandlinePre('/')<CR>?
  function! CommandlinePre(mode) abort
    call dein#source('ddc.vim')
    " Note: It disables default command line completion!
    cnoremap <expr> <Tab>
    \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
    \ ddc#manual_complete()
    cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
    set wildchar=<C-t>
    " Overwrite sources
    let s:prev_buffer_config = ddc#custom#get_buffer()
    if a:mode ==# ':'
      call ddc#custom#patch_buffer('sources',
              \ ['cmdline', 'cmdline-history', 'around'])
      call ddc#custom#patch_buffer('keywordPattern', '[0-9a-zA-Z_:#]*')
      call ddc#custom#patch_buffer('sourceOptions', {
      \ 'cmdline': {
      \   'forceCompletionPattern': '\S/\S*'
      \ },
      \})
    else
      call ddc#custom#patch_buffer('sources',
              \ ['around', 'line'])
    endif
    autocmd User DDCCmdlineLeave ++once call CommandlinePost()
    " Enable command line completion
    call ddc#enable_cmdline_completion()
    call ddc#enable()
  endfunction
  function! CommandlinePost() abort
    " Restore sources
    call ddc#custom#set_buffer(s:prev_buffer_config)
    cunmap <Tab>
    set wildchar=<Tab>
  endfunction
'''

[[plugins]]
repo = 'Shougo/pum.vim'

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim', 'toml', 'markdown']
depends = 'ddc.vim'
hook_source = '''
  call ddc#custom#patch_filetype(
          \ ['vim'], 'sources', has('nvim') ?
          \ ['necovim', 'around', 'deoppet', 'file'] :
          \ ['necovim', 'around', 'file']
          \ )
'''

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_length'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'BufEnter'
on_ft = ['rust', 'go']
if = 'has("nvim")'
depends = 'ddc.vim'
hook_source = '''
lua << EOF
local nvim_lsp = require'lspconfig'

local on_attach = function(client)
  local opts = {noremap = true, silent = true};
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  require'completion'.on_attach(client)
end

nvim_lsp.gopls.setup{}
nvim_lsp.rust_analyzer.setup({
  on_attach=on_attach,
  settings = {
    ["rust-analyzer"] = {
      assist = {
        importGranularity = "module",
        importPrefix = "by_self",
      },
      cargo = {
        loadOutDirsFromCheck = true
      },
      procMacro = {
        enable = true
      },
    }
  }
})
EOF
'''


[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-omni'
